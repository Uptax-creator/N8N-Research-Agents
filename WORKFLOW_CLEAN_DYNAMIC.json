{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "work-1001-dynamic",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "webhook_clean",
      "name": "Webhook Clean",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [0, 0]
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ EXECUTOR LIMPO - APENAS CARREGA E EXECUTA GITHUB\nconst componentUrl = $json.envelope_processor_url || 'https://raw.githubusercontent.com/Uptax-creator/N8N-Research-Agents/main/components/dynamic/envelope-processor-dynamic-v1.0.js';\n\nconsole.log('üîó Carregando Envelope Processor:', componentUrl);\n\n// Carregar c√≥digo do GitHub usando axios\nconst axios = require('axios');\nconst response = await axios.get(componentUrl);\nif (response.status !== 200) {\n  throw new Error(`HTTP ${response.status}: N√£o foi poss√≠vel carregar ${componentUrl}`);\n}\n\nconst githubCode = response.data;\nconsole.log('‚úÖ C√≥digo carregado, tamanho:', githubCode.length, 'chars');\n\n// Executar c√≥digo do GitHub com contexto completo\nconst vm = require('vm');\nconst context = {\n  $input,\n  $json,\n  console,\n  require,\n  Date,\n  JSON,\n  Promise,\n  fetch,\n  Buffer,\n  process: { env: process.env }\n};\n\ntry {\n  const result = vm.runInNewContext(githubCode, context);\n  console.log('‚úÖ Envelope Processor executado com sucesso');\n  return result;\n} catch (error) {\n  console.error('‚ùå Erro na execu√ß√£o:', error.message);\n  throw error;\n}"
      },
      "id": "execute_envelope_clean",
      "name": "Execute Envelope Clean",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 0]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.agent_context.text }}",
        "options": {
          "systemMessage": "={{ $json.agent_context.system_message }}"
        }
      },
      "id": "ai_agent_clean",
      "name": "AI Agent Clean",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [600, 0]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {
          "temperature": 0.7,
          "topP": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [400, 200],
      "id": "gemini_model_clean",
      "name": "Gemini Model Clean",
      "credentials": {
        "googlePalmApi": {
          "id": "fo1wxthXWXgY03J3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "session_{{ $json.node_transfer_vars.agent_id }}_{{ $json.node_transfer_vars.dateNow }}"
      },
      "id": "buffer_memory_clean",
      "name": "Buffer Memory Clean",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [600, 200]
    },
    {
      "parameters": {
        "endpointUrl": "={{ $json.mcp_endpoint_http }}",
        "serverTransport": "httpStreamable",
        "options": {
          "timeout": 60000
        }
      },
      "id": "mcp_client_clean",
      "name": "MCP Client Clean",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [800, 200],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ RESPONSE PROCESSOR LIMPO - CARREGA E EXECUTA DO GITHUB\nconst responseUrl = $json.response_processor_url || 'https://raw.githubusercontent.com/Uptax-creator/N8N-Research-Agents/main/components/dynamic/response-processor-dynamic-v1.0.js';\n\nconsole.log('üîó Carregando Response Processor:', responseUrl);\n\n// Carregar c√≥digo do GitHub usando axios\nconst axios = require('axios');\nconst response = await axios.get(responseUrl);\nif (response.status !== 200) {\n  // Fallback para resposta simples\n  console.log('‚ö†Ô∏è Usando fallback response');\n  const result_text = $json.text || $json.output || 'Resposta n√£o dispon√≠vel';\n  return [{\n    json: {\n      status: 'success',\n      result: result_text,\n      agent_id: $json.agent_id,\n      project_id: $json.project_id,\n      dateNow: $json.dateNow,\n      processed_at: new Date().toISOString()\n    }\n  }];\n}\n\nconst githubCode = response.data;\nconsole.log('‚úÖ Response Processor carregado, tamanho:', githubCode.length);\n\n// Executar c√≥digo do GitHub\nconst vm = require('vm');\nconst context = {\n  $input,\n  $json,\n  console,\n  require,\n  Date,\n  JSON\n};\n\ntry {\n  const result = vm.runInNewContext(githubCode, context);\n  console.log('‚úÖ Response Processor executado com sucesso');\n  return result;\n} catch (error) {\n  console.error('‚ùå Erro no Response Processor:', error.message);\n  throw error;\n}"
      },
      "id": "execute_response_clean",
      "name": "Execute Response Clean",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 0]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond_webhook_clean",
      "name": "Respond Webhook Clean",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [1200, 0]
    }
  ],
  "connections": {
    "Webhook Clean": {
      "main": [
        [{"node": "Execute Envelope Clean", "type": "main", "index": 0}]
      ]
    },
    "Execute Envelope Clean": {
      "main": [
        [{"node": "AI Agent Clean", "type": "main", "index": 0}]
      ]
    },
    "AI Agent Clean": {
      "main": [
        [{"node": "Execute Response Clean", "type": "main", "index": 0}]
      ]
    },
    "Execute Response Clean": {
      "main": [
        [{"node": "Respond Webhook Clean", "type": "main", "index": 0}]
      ]
    },
    "Gemini Model Clean": {
      "ai_languageModel": [
        [{"node": "AI Agent Clean", "type": "ai_languageModel", "index": 0}]
      ]
    },
    "Buffer Memory Clean": {
      "ai_memory": [
        [{"node": "AI Agent Clean", "type": "ai_memory", "index": 0}]
      ]
    },
    "MCP Client Clean": {
      "ai_tool": [
        [{"node": "AI Agent Clean", "type": "ai_tool", "index": 0}]
      ]
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  }
}