{
  "name": "Business Plan Agent V4",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/business-plan-v4",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "74bb7476-aeec-482c-9589-94d715f7f486",
      "name": "Webhook Enhanced",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -288,
        -48
      ],
      "webhookId": "enhanced-research-agent-webhook"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/Uptax-creator/N8N-Research-Agents/clean-deployment/N8N/agents/enhanced-research-agent/config.json",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "840b9c12-b2db-4bab-a511-1bbd89b6eabf",
      "name": "Load GitHub Config",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        -48
      ]
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/Uptax-creator/N8N-Research-Agents/clean-deployment/N8N/agents/enhanced-research-agent/prompts.json",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "c7cb93b8-d6e0-446c-b833-0ec7ae9aaa3c",
      "name": "Load GitHub Prompts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        -48
      ]
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/Uptax-creator/N8N-Research-Agents/clean-deployment/N8N/code/processors/enhanced-prompt-processor.js",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "9c18f609-7fed-4e2c-9744-b4baeeb3c6ba",
      "name": "Load Prompt Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "  const inputData = $('Webhook Enhanced').item.json.body; return [{text: inputData.query || 'Teste', session_id: 'test', system_message:'You are a helpful research assistant.' }];"
      },
      "id": "a53da5e7-421e-4907-a6e9-ba8bddeacad7",
      "name": "Prompt Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        -48
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "={{ $json.system_message }}"
        }
      },
      "id": "691a7801-61fc-48bd-a021-f454e959eacc",
      "name": "Enhanced AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        720,
        -48
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "id": "6d93efbb-f174-4c42-a4ab-ec262497ab19",
      "name": "Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        784,
        208
      ]
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/Uptax-creator/N8N-Research-Agents/clean-deployment/N8N/code/processors/enhanced-response-formatter-clean.js",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "1ac79513-3052-4ddd-9b26-0960d95d195b",
      "name": "Load Response Formatter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1040,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "// GitHub Dynamic Code Executor - N8N Response Formatter Node\n// Executa c√≥digo dinamicamente carregado do GitHub\n// Baseado na estrat√©gia que funcionou antes\n\ntry {\n    console.log('üöÄ GitHub Dynamic Executor iniciado');\n\n    // Verificar se temos c√≥digo do GitHub\n    let githubCode = null;\n    try {\n        githubCode = $('Load Response Formatter').item.json.data;\n        console.log('‚úÖ C√≥digo GitHub carregado:', githubCode.length, 'caracteres');\n    } catch (e) {\n        console.log('‚ö†Ô∏è Falha ao carregar c√≥digo GitHub:', e.message);\n    }\n\n    if (githubCode) {\n        console.log('üîß Executando c√≥digo din√¢mico do GitHub...');\n\n        // Criar fun√ß√£o com contexto N8N\n        const executeCode = new Function(\n            '$json',\n            '$execution',\n            '$workflow',\n            '$',\n            'console',\n            githubCode + '\\n// Execute the code and return result'\n        );\n\n        // Executar c√≥digo com contexto atual\n        const result = executeCode($json, $execution, $workflow, $, console);\n\n        console.log('‚úÖ GitHub code executado com sucesso');\n        return result;\n\n    } else {\n        console.log('üîÑ Fallback para c√≥digo inline...');\n\n        // FALLBACK: C√≥digo inline baseado na vers√£o que funcionou\n        const aiResponse = $('Enhanced AI Agent').item.json;\n        const processorData = $('Prompt Processor').item.json;\n\n        // Detec√ß√£o de agente\n        const webhookUrl = $execution.mode === 'webhook' ?\n            ($json.headers?.['x-forwarded-uri'] || $json.headers?.referer || '/webhook/business-plan-v4') :\n            '/webhook/business-plan-v4';\n\n        const agentTypeMatch = webhookUrl.match(/\\/webhook\\/([^-v\\d]+)/);\n        const detectedType = agentTypeMatch ? agentTypeMatch[1] : 'business-plan';\n\n        // Configura√ß√£o inline\n        const inlineConfig = {\n            'business-plan': {\n                agent_type: 'business-plan',\n                name: 'Especialista em Planos de Neg√≥cio',\n                version: '4.0.0'\n            }\n        };\n\n        const config = inlineConfig[detectedType] || inlineConfig['business-plan'];\n        const result = aiResponse?.output || aiResponse?.text || 'Resposta processada (fallback)';\n\n        // Resposta fallback (exatamente como a vers√£o que funcionou)\n        return [{\n            success: true,\n            agent: config.agent_type,\n            name: config.name,\n            version: config.version,\n            query: processorData?.text || $json.query || 'Consulta fallback',\n            result: result,\n            metadata: {\n                webhook_path: webhookUrl,\n                detected_type: detectedType,\n                timestamp: new Date().toISOString(),\n                mode: 'inline-fallback',\n                n8n_execution_id: $execution.id\n            }\n        }];\n    }\n\n} catch (e) {\n    console.log('‚ùå Erro cr√≠tico no executor:', e.message);\n\n    // FALLBACK ABSOLUTO\n    return [{\n        success: false,\n        agent: 'business-plan',\n        name: 'Especialista em Planos de Neg√≥cio (Critical Fallback)',\n        version: '4.0.0',\n        query: $json.query || 'Critical error query',\n        result: 'Sistema em modo de recupera√ß√£o cr√≠tica',\n        metadata: {\n            mode: 'critical-fallback',\n            timestamp: new Date().toISOString(),\n            error_message: e.message\n        }\n    }];\n}"
      },
      "id": "664c45e7-df4e-45ba-a6d4-b936c02777c6",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        -48
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "b523c57b-2d75-48e2-b1fd-b783346777ae",
      "name": "Respond Enhanced",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1520,
        -48
      ]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {
          "topP": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        624,
        192
      ],
      "id": "96cf0c66-1e08-4297-a4b9-199a9f090abf",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "fo1wxthXWXgY03J3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://mcp.brightdata.com/sse?token=ecfc6404fb9eb026a9c802196b8d5caaf131d63c0931f9e888e57077e6b1f8cf",
        "options": {
          "timeout": 30000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        944,
        208
      ],
      "id": "641a6d50-f74e-4254-9be6-4b9b05483068",
      "name": "MCP Client"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Enhanced": {
      "main": [
        [
          {
            "node": "Load GitHub Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load GitHub Config": {
      "main": [
        [
          {
            "node": "Load GitHub Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load GitHub Prompts": {
      "main": [
        [
          {
            "node": "Load Prompt Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Prompt Processor": {
      "main": [
        [
          {
            "node": "Prompt Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Processor": {
      "main": [
        [
          {
            "node": "Enhanced AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced AI Agent": {
      "main": [
        [
          {
            "node": "Load Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "Enhanced AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Load Response Formatter": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatter": {
      "main": [
        [
          {
            "node": "Respond Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1b2b2890-3460-4fdc-96ee-04af88768102",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cd5e44ae437f0c9ab2d07a5f9f48e7f2a5b6c7d370c2fb3ae41bd86053b66f9d"
  },
  "id": "scJSDgRWiHTkfNUn",
  "tags": []
}